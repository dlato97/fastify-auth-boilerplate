// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(nanoid())
  email     String   @unique
  username  String?  @unique
  firstName String?
  lastName  String?
  avatar    String?

  // Authentication
  password     String
  isActive     Boolean @default(false)
  isVerified   Boolean @default(false)
  verifyToken  String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  lastLoginAt  DateTime?

  // 2FA
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?
  backupCodes      String[]

  // Metadata
  metadata     Json?
  preferences  Json?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  roles        UserRole[]
  sessions     UserSession[]
  auditLogs    AuditLog[]

  @@map("users")
}

model Role {
  id          String @id @default(nanoid())
  name        String @unique
  displayName String
  description String?
  color       String?

  // Permissions as JSON array for flexibility
  permissions Json

  // Hierarchy
  parentId String?
  parent   Role?  @relation("RoleHierarchy", fields: [parentId], references: [id])
  children Role[] @relation("RoleHierarchy")

  // Metadata
  isSystem   Boolean @default(false)
  isActive   Boolean @default(true)
  metadata   Json?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users UserRole[]

  @@map("roles")
}

model UserRole {
  id     String @id @default(nanoid())
  userId String
  roleId String

  // Optional expiration for temporary roles
  expiresAt DateTime?

  // Who assigned this role
  assignedBy String?
  assignedAt DateTime @default(now())

  // Metadata for role assignment
  metadata Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model UserSession {
  id           String   @id @default(nanoid())
  userId       String
  refreshToken String   @unique
  fingerprint  String?
  ipAddress    String?
  userAgent    String?

  // Session metadata
  isActive     Boolean  @default(true)
  lastUsedAt   DateTime @default(now())
  expiresAt    DateTime

  // Device info
  deviceType   String?
  deviceName   String?
  location     Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model AuditLog {
  id        String   @id @default(nanoid())
  userId    String?
  action    String
  resource  String
  resourceId String?

  // Request details
  method     String?
  endpoint   String?
  ipAddress  String
  userAgent  String?

  // Data changes
  oldData    Json?
  newData    Json?
  metadata   Json?

  // Status
  success    Boolean
  errorMessage String?

  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@map("audit_logs")
}

model RevokedToken {
  id        String   @id @default(nanoid())
  jti       String   @unique // JWT ID
  userId    String?
  reason    String?
  revokedAt DateTime @default(now())
  expiresAt DateTime

  @@index([jti])
  @@index([expiresAt])
  @@map("revoked_tokens")
}

// System settings and configurations
model Setting {
  id    String @id @default(nanoid())
  key   String @unique
  value Json
  type  String // 'string', 'number', 'boolean', 'json'

  description String?
  isPublic    Boolean @default(false)
  isSystem    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}
